// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: proto/todo/v2/todo.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TodoService_AddTask_FullMethodName    = "/todo.v2.TodoService/AddTask"
	TodoService_ListTasks_FullMethodName  = "/todo.v2.TodoService/ListTasks"
	TodoService_UpdateTask_FullMethodName = "/todo.v2.TodoService/UpdateTask"
	TodoService_DeleteTask_FullMethodName = "/todo.v2.TodoService/DeleteTask"
)

// TodoServiceClient is the client API for TodoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TodoServiceClient interface {
	AddTask(ctx context.Context, in *AddTaskRequest, opts ...grpc.CallOption) (*AddTaskResponse, error)
	ListTasks(ctx context.Context, in *ListTasksRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ListTasksResponse], error)
	UpdateTask(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[UpdateTaskRequest, UpdateTaskResponse], error)
	DeleteTask(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[DeleteTaskRequest, DeleteTaskResponse], error)
}

type todoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTodoServiceClient(cc grpc.ClientConnInterface) TodoServiceClient {
	return &todoServiceClient{cc}
}

func (c *todoServiceClient) AddTask(ctx context.Context, in *AddTaskRequest, opts ...grpc.CallOption) (*AddTaskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddTaskResponse)
	err := c.cc.Invoke(ctx, TodoService_AddTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoServiceClient) ListTasks(ctx context.Context, in *ListTasksRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ListTasksResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TodoService_ServiceDesc.Streams[0], TodoService_ListTasks_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ListTasksRequest, ListTasksResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TodoService_ListTasksClient = grpc.ServerStreamingClient[ListTasksResponse]

func (c *todoServiceClient) UpdateTask(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[UpdateTaskRequest, UpdateTaskResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TodoService_ServiceDesc.Streams[1], TodoService_UpdateTask_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[UpdateTaskRequest, UpdateTaskResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TodoService_UpdateTaskClient = grpc.ClientStreamingClient[UpdateTaskRequest, UpdateTaskResponse]

func (c *todoServiceClient) DeleteTask(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[DeleteTaskRequest, DeleteTaskResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TodoService_ServiceDesc.Streams[2], TodoService_DeleteTask_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[DeleteTaskRequest, DeleteTaskResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TodoService_DeleteTaskClient = grpc.BidiStreamingClient[DeleteTaskRequest, DeleteTaskResponse]

// TodoServiceServer is the server API for TodoService service.
// All implementations must embed UnimplementedTodoServiceServer
// for forward compatibility.
type TodoServiceServer interface {
	AddTask(context.Context, *AddTaskRequest) (*AddTaskResponse, error)
	ListTasks(*ListTasksRequest, grpc.ServerStreamingServer[ListTasksResponse]) error
	UpdateTask(grpc.ClientStreamingServer[UpdateTaskRequest, UpdateTaskResponse]) error
	DeleteTask(grpc.BidiStreamingServer[DeleteTaskRequest, DeleteTaskResponse]) error
	mustEmbedUnimplementedTodoServiceServer()
}

// UnimplementedTodoServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTodoServiceServer struct{}

func (UnimplementedTodoServiceServer) AddTask(context.Context, *AddTaskRequest) (*AddTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTask not implemented")
}
func (UnimplementedTodoServiceServer) ListTasks(*ListTasksRequest, grpc.ServerStreamingServer[ListTasksResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ListTasks not implemented")
}
func (UnimplementedTodoServiceServer) UpdateTask(grpc.ClientStreamingServer[UpdateTaskRequest, UpdateTaskResponse]) error {
	return status.Errorf(codes.Unimplemented, "method UpdateTask not implemented")
}
func (UnimplementedTodoServiceServer) DeleteTask(grpc.BidiStreamingServer[DeleteTaskRequest, DeleteTaskResponse]) error {
	return status.Errorf(codes.Unimplemented, "method DeleteTask not implemented")
}
func (UnimplementedTodoServiceServer) mustEmbedUnimplementedTodoServiceServer() {}
func (UnimplementedTodoServiceServer) testEmbeddedByValue()                     {}

// UnsafeTodoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TodoServiceServer will
// result in compilation errors.
type UnsafeTodoServiceServer interface {
	mustEmbedUnimplementedTodoServiceServer()
}

func RegisterTodoServiceServer(s grpc.ServiceRegistrar, srv TodoServiceServer) {
	// If the following call pancis, it indicates UnimplementedTodoServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TodoService_ServiceDesc, srv)
}

func _TodoService_AddTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoServiceServer).AddTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TodoService_AddTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoServiceServer).AddTask(ctx, req.(*AddTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TodoService_ListTasks_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListTasksRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TodoServiceServer).ListTasks(m, &grpc.GenericServerStream[ListTasksRequest, ListTasksResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TodoService_ListTasksServer = grpc.ServerStreamingServer[ListTasksResponse]

func _TodoService_UpdateTask_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TodoServiceServer).UpdateTask(&grpc.GenericServerStream[UpdateTaskRequest, UpdateTaskResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TodoService_UpdateTaskServer = grpc.ClientStreamingServer[UpdateTaskRequest, UpdateTaskResponse]

func _TodoService_DeleteTask_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TodoServiceServer).DeleteTask(&grpc.GenericServerStream[DeleteTaskRequest, DeleteTaskResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TodoService_DeleteTaskServer = grpc.BidiStreamingServer[DeleteTaskRequest, DeleteTaskResponse]

// TodoService_ServiceDesc is the grpc.ServiceDesc for TodoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TodoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "todo.v2.TodoService",
	HandlerType: (*TodoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddTask",
			Handler:    _TodoService_AddTask_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListTasks",
			Handler:       _TodoService_ListTasks_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "UpdateTask",
			Handler:       _TodoService_UpdateTask_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "DeleteTask",
			Handler:       _TodoService_DeleteTask_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/todo/v2/todo.proto",
}
